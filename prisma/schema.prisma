// This is your Prisma schema file,
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}


model User {
  id            Int       @id @default(autoincrement())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")
  image         String?
  accounts      Account[]
  sessions      Session[]
  profile       Profile?
  minProfile    MinimalProfile?
  attendedEvents  Attendance[]

  @@map(name: "users")
}

model Profile {
  user    User    @relation(fields: [userId], references: [id])
  userId  Int
  departmentHead  Department?
  department      Department?
  // Essential info
  engName         String?
  isMale          Boolean
  isStudent       Boolean
  majorYear       String?
  dateOfBirth     DateTime
  placeOfBirth    String
  isTaiwanese     Boolean
  nationalId      String?
  passportNumber  String?
  address         String
  emergencyContactName  String
  emergencyContactMobile  String
  emergencyContactPhone   String?
  beneficiaryName     String
  beneficiaryRelation String
  // Food preferences
  riceAmount      Decimal
  foodPreference  String?

  @@id([userId])
}

model MinimalProfile {
  user          User    @relation(fields: [userId], references: [id])
  userId        Int
  name          String
  mobileNumber  String
  phoneNumber   String?
}

enum Department {
  ClubLeader
  CoLeader
  ControlAndRescue  /// 山難部
  Guide             /// 嚮導部
  Equipment         /// 社產組
  Finance           /// 總務
  Record            /// 檔案組
  Tech              /// 技術組
}

enum EventRole {
  Host
  Mentor      /// 輔領
  Member
  Watcher     /// 留守
  Rescue      /// 山難
}

model Attendance {
  event     Event     @relation(fields: [eventId], references: [id])
  eventId   Int
  user      User      @relation(fields: [userId], references: [id])
  userId    Int
  role      EventRole
  jobs      String?   // 職務 (ex: 保險、大廚、等等)

  @@id([eventId, userId])
}

// TODO: cascading delete on related fields...?
model Event {
  id              Int       @id @default(autoincrement())
  inviteToken     String
  title           String
  beginDate       DateTime
  endDate         DateTime
  location        String
  category        String      // 隊伍分級
  groupCategory   String?     // 群
  drivers         String?
  driversNumber   String?
  radioFreq       String
  radioCodename   String?
  
  tripOverview    String
  rescueTime      String
  retreatPlan     String?
  mapCoordSystem  String
  records         String
  equipList       String[]
  equipDes        String[]
  techEquipList   String[]
  techEquipDes    String[]
  
  attendants      Attendance[]  // Contains all attending members & their roles
}

model Account {
  id                 Int     @id @default(autoincrement())
  userId             Int     @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique @map("session_token")
  userId       Int      @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}