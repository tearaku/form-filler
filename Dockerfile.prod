# --- Step 1. Rebuild the source code only when needed ---
FROM node:16-alpine3.16 AS deps

# Check https://github.com/nodejs/docker-node/tree/b4117f9333da4138b03a546ec926ef50a31506c3#nodealpine to understand why libc6-compat might be needed.
RUN apk add --no-cache libc6-compat
WORKDIR /app

# Install dependencies based on the preferred package manager
COPY package.json yarn.lock* package-lock.json* pnpm-lock.yaml* ./
# Omit --production flag for TypeScript devDependencies
RUN \
  if [ -f yarn.lock ]; then yarn --frozen-lockfile; \
  elif [ -f package-lock.json ]; then npm ci; \
  elif [ -f pnpm-lock.yaml ]; then yarn global add pnpm && pnpm i; \
  else echo "Lockfile not found." && exit 1; \
  fi

# --- Step 2. Rebuild source as necessary ---
FROM node:16-alpine3.16 AS builder

# Prisma requires openssl 1.1, but later versions of alpines come with 3.0.x
# Check: https://github.com/prisma/prisma/issues/14043, and https://github.com/prisma/prisma/issues/16553#issuecomment-1353302617
RUN apk add --update --no-cache openssl libressl-dev

WORKDIR /app

COPY --from=deps /app/node_modules ./node_modules
COPY . .
COPY .env .env

# Generate prisma client into node_modules folder
RUN npx prisma generate
RUN yarn build


# --- Step 3. Production image, copy all the files and run next ---
FROM node:16-alpine3.16 AS runner

ENV NODE_ENV=production

WORKDIR /app

# Don't run production as root
RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs
USER nextjs

COPY --from=builder /app/public ./public

# Automatically leverage output traces to reduce image size
# https://nextjs.org/docs/advanced-features/output-file-tracing
COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static

# Uncomment the following line to disable telemetry at run time
# ENV NEXT_TELEMETRY_DISABLED 1

CMD ["node", "server.js"]
